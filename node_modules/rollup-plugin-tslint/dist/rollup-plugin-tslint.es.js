import path from 'path';
import ts from 'typescript';
import { createFilter } from 'rollup-pluginutils';
import { Configuration, Linter } from 'tslint';

function normalizePath (id) {
  return path
    .relative(process.cwd(), id)
    .split(path.sep)
    .join('/')
}

function isString (value) {
  return Object.prototype.toString.call(value) === '[object String]'
}

function tslint$1 (options) {
  if ( options === void 0 ) options = {};

  var linter;

  var filter = createFilter(
    options.include,
    options.exclude || 'node_modules/**'
  );

  // formatter: "stylish"
  // rulesDirectory: null,
  // formattersDirectory: "customFormatters/"

  var tsConfigSearchPath = options.tsConfigSearchPath || process.cwd();
  var tsConfigFile = ts.findConfigFile(tsConfigSearchPath, ts.sys.fileExists);

  var config = {
    fix: options.fix || false,
    formatter: options.formatter || 'stylish',
    formattersDirectory: options.formattersDirectory || null,
    rulesDirectory: options.rulesDirectory || null
  };

  return {
    name: 'tslint',
    sourceMap: false,

    options: function options () {
      var program = Linter.createProgram(tsConfigFile);

      linter = new Linter(config, program);
    },

    transform: function transform (code, id) {
      var fileName = normalizePath(id);
      if (!filter(id)) {
        return null
      }

      var configuration =
        options.configuration === null ||
        options.configuration === undefined ||
        isString(options.configuration)
          ? Configuration.findConfiguration(
              options.configuration || null,
              fileName
            ).results
          : Configuration.parseConfigFile(options.configuration, process.cwd());

      linter.lint(id, code, configuration);
      var result = linter.getResult();

      // Clear all results for current file from tslint
      linter.failures = [];
      linter.fixes = [];

      var hasWarnings = options.throwOnWarning && result.warningCount !== 0;
      var hasErrors = (options.throwOnError || options.throwError) && result.errorCount !== 0;

      if (result.errorCount || result.warningCount) {
        console.log(result.output);
      }

      if (hasWarnings && hasErrors) {
        throw Error('Warnings or errors were found')
      }

      if (hasWarnings) {
        throw Error('Warnings were found')
      }

      if (hasErrors) {
        throw Error('Errors were found')
      }
    }
  }
}

export default tslint$1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9sbHVwLXBsdWdpbi10c2xpbnQuZXMuanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xuaW1wb3J0IHRzIGZyb20gJ3R5cGVzY3JpcHQnXG5pbXBvcnQgeyBjcmVhdGVGaWx0ZXIgfSBmcm9tICdyb2xsdXAtcGx1Z2ludXRpbHMnXG5pbXBvcnQgeyBMaW50ZXIsIENvbmZpZ3VyYXRpb24gfSBmcm9tICd0c2xpbnQnXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVBhdGggKGlkKSB7XG4gIHJldHVybiBwYXRoXG4gICAgLnJlbGF0aXZlKHByb2Nlc3MuY3dkKCksIGlkKVxuICAgIC5zcGxpdChwYXRoLnNlcClcbiAgICAuam9pbignLycpXG59XG5cbmZ1bmN0aW9uIGlzU3RyaW5nICh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgU3RyaW5nXSdcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHNsaW50IChvcHRpb25zID0ge30pIHtcbiAgbGV0IGxpbnRlclxuXG4gIGNvbnN0IGZpbHRlciA9IGNyZWF0ZUZpbHRlcihcbiAgICBvcHRpb25zLmluY2x1ZGUsXG4gICAgb3B0aW9ucy5leGNsdWRlIHx8ICdub2RlX21vZHVsZXMvKionXG4gIClcblxuICAvLyBmb3JtYXR0ZXI6IFwic3R5bGlzaFwiXG4gIC8vIHJ1bGVzRGlyZWN0b3J5OiBudWxsLFxuICAvLyBmb3JtYXR0ZXJzRGlyZWN0b3J5OiBcImN1c3RvbUZvcm1hdHRlcnMvXCJcblxuICBjb25zdCB0c0NvbmZpZ1NlYXJjaFBhdGggPSBvcHRpb25zLnRzQ29uZmlnU2VhcmNoUGF0aCB8fCBwcm9jZXNzLmN3ZCgpXG4gIGNvbnN0IHRzQ29uZmlnRmlsZSA9IHRzLmZpbmRDb25maWdGaWxlKHRzQ29uZmlnU2VhcmNoUGF0aCwgdHMuc3lzLmZpbGVFeGlzdHMpXG5cbiAgY29uc3QgY29uZmlnID0ge1xuICAgIGZpeDogb3B0aW9ucy5maXggfHwgZmFsc2UsXG4gICAgZm9ybWF0dGVyOiBvcHRpb25zLmZvcm1hdHRlciB8fCAnc3R5bGlzaCcsXG4gICAgZm9ybWF0dGVyc0RpcmVjdG9yeTogb3B0aW9ucy5mb3JtYXR0ZXJzRGlyZWN0b3J5IHx8IG51bGwsXG4gICAgcnVsZXNEaXJlY3Rvcnk6IG9wdGlvbnMucnVsZXNEaXJlY3RvcnkgfHwgbnVsbFxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAndHNsaW50JyxcbiAgICBzb3VyY2VNYXA6IGZhbHNlLFxuXG4gICAgb3B0aW9ucyAoKSB7XG4gICAgICBjb25zdCBwcm9ncmFtID0gTGludGVyLmNyZWF0ZVByb2dyYW0odHNDb25maWdGaWxlKVxuXG4gICAgICBsaW50ZXIgPSBuZXcgTGludGVyKGNvbmZpZywgcHJvZ3JhbSlcbiAgICB9LFxuXG4gICAgdHJhbnNmb3JtIChjb2RlLCBpZCkge1xuICAgICAgY29uc3QgZmlsZU5hbWUgPSBub3JtYWxpemVQYXRoKGlkKVxuICAgICAgaWYgKCFmaWx0ZXIoaWQpKSB7XG4gICAgICAgIHJldHVybiBudWxsXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGNvbmZpZ3VyYXRpb24gPVxuICAgICAgICBvcHRpb25zLmNvbmZpZ3VyYXRpb24gPT09IG51bGwgfHxcbiAgICAgICAgb3B0aW9ucy5jb25maWd1cmF0aW9uID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgaXNTdHJpbmcob3B0aW9ucy5jb25maWd1cmF0aW9uKVxuICAgICAgICAgID8gQ29uZmlndXJhdGlvbi5maW5kQ29uZmlndXJhdGlvbihcbiAgICAgICAgICAgICAgb3B0aW9ucy5jb25maWd1cmF0aW9uIHx8IG51bGwsXG4gICAgICAgICAgICAgIGZpbGVOYW1lXG4gICAgICAgICAgICApLnJlc3VsdHNcbiAgICAgICAgICA6IENvbmZpZ3VyYXRpb24ucGFyc2VDb25maWdGaWxlKG9wdGlvbnMuY29uZmlndXJhdGlvbiwgcHJvY2Vzcy5jd2QoKSlcblxuICAgICAgbGludGVyLmxpbnQoaWQsIGNvZGUsIGNvbmZpZ3VyYXRpb24pXG4gICAgICBjb25zdCByZXN1bHQgPSBsaW50ZXIuZ2V0UmVzdWx0KClcblxuICAgICAgLy8gQ2xlYXIgYWxsIHJlc3VsdHMgZm9yIGN1cnJlbnQgZmlsZSBmcm9tIHRzbGludFxuICAgICAgbGludGVyLmZhaWx1cmVzID0gW11cbiAgICAgIGxpbnRlci5maXhlcyA9IFtdXG5cbiAgICAgIGNvbnN0IGhhc1dhcm5pbmdzID0gb3B0aW9ucy50aHJvd09uV2FybmluZyAmJiByZXN1bHQud2FybmluZ0NvdW50ICE9PSAwXG4gICAgICBjb25zdCBoYXNFcnJvcnMgPSAob3B0aW9ucy50aHJvd09uRXJyb3IgfHwgb3B0aW9ucy50aHJvd0Vycm9yKSAmJiByZXN1bHQuZXJyb3JDb3VudCAhPT0gMFxuXG4gICAgICBpZiAocmVzdWx0LmVycm9yQ291bnQgfHwgcmVzdWx0Lndhcm5pbmdDb3VudCkge1xuICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQub3V0cHV0KVxuICAgICAgfVxuXG4gICAgICBpZiAoaGFzV2FybmluZ3MgJiYgaGFzRXJyb3JzKSB7XG4gICAgICAgIHRocm93IEVycm9yKCdXYXJuaW5ncyBvciBlcnJvcnMgd2VyZSBmb3VuZCcpXG4gICAgICB9XG5cbiAgICAgIGlmIChoYXNXYXJuaW5ncykge1xuICAgICAgICB0aHJvdyBFcnJvcignV2FybmluZ3Mgd2VyZSBmb3VuZCcpXG4gICAgICB9XG5cbiAgICAgIGlmIChoYXNFcnJvcnMpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0Vycm9ycyB3ZXJlIGZvdW5kJylcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJ0c2xpbnQiLCJsZXQiLCJjb25zdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFLQSxTQUFTLGFBQWEsRUFBRSxFQUFFLEVBQUU7RUFDMUIsT0FBTyxJQUFJO0tBQ1IsUUFBUSxD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
