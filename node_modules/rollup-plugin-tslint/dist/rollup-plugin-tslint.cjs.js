'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var path = _interopDefault(require('path'));
var ts = _interopDefault(require('typescript'));
var rollupPluginutils = require('rollup-pluginutils');
var tslint = require('tslint');

function normalizePath (id) {
  return path
    .relative(process.cwd(), id)
    .split(path.sep)
    .join('/')
}

function isString (value) {
  return Object.prototype.toString.call(value) === '[object String]'
}

function tslint$1 (options) {
  if ( options === void 0 ) options = {};

  var linter;

  var filter = rollupPluginutils.createFilter(
    options.include,
    options.exclude || 'node_modules/**'
  );

  // formatter: "stylish"
  // rulesDirectory: null,
  // formattersDirectory: "customFormatters/"

  var tsConfigSearchPath = options.tsConfigSearchPath || process.cwd();
  var tsConfigFile = ts.findConfigFile(tsConfigSearchPath, ts.sys.fileExists);

  var config = {
    fix: options.fix || false,
    formatter: options.formatter || 'stylish',
    formattersDirectory: options.formattersDirectory || null,
    rulesDirectory: options.rulesDirectory || null
  };

  return {
    name: 'tslint',
    sourceMap: false,

    options: function options () {
      var program = tslint.Linter.createProgram(tsConfigFile);

      linter = new tslint.Linter(config, program);
    },

    transform: function transform (code, id) {
      var fileName = normalizePath(id);
      if (!filter(id)) {
        return null
      }

      var configuration =
        options.configuration === null ||
        options.configuration === undefined ||
        isString(options.configuration)
          ? tslint.Configuration.findConfiguration(
              options.configuration || null,
              fileName
            ).results
          : tslint.Configuration.parseConfigFile(options.configuration, process.cwd());

      linter.lint(id, code, configuration);
      var result = linter.getResult();

      // Clear all results for current file from tslint
      linter.failures = [];
      linter.fixes = [];

      var hasWarnings = options.throwOnWarning && result.warningCount !== 0;
      var hasErrors = (options.throwOnError || options.throwError) && result.errorCount !== 0;

      if (result.errorCount || result.warningCount) {
        console.log(result.output);
      }

      if (hasWarnings && hasErrors) {
        throw Error('Warnings or errors were found')
      }

      if (hasWarnings) {
        throw Error('Warnings were found')
      }

      if (hasErrors) {
        throw Error('Errors were found')
      }
    }
  }
}

module.exports = tslint$1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9sbHVwLXBsdWdpbi10c2xpbnQuY2pzLmpzIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCdcbmltcG9ydCB0cyBmcm9tICd0eXBlc2NyaXB0J1xuaW1wb3J0IHsgY3JlYXRlRmlsdGVyIH0gZnJvbSAncm9sbHVwLXBsdWdpbnV0aWxzJ1xuaW1wb3J0IHsgTGludGVyLCBDb25maWd1cmF0aW9uIH0gZnJvbSAndHNsaW50J1xuXG5mdW5jdGlvbiBub3JtYWxpemVQYXRoIChpZCkge1xuICByZXR1cm4gcGF0aFxuICAgIC5yZWxhdGl2ZShwcm9jZXNzLmN3ZCgpLCBpZClcbiAgICAuc3BsaXQocGF0aC5zZXApXG4gICAgLmpvaW4oJy8nKVxufVxuXG5mdW5jdGlvbiBpc1N0cmluZyAodmFsdWUpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IFN0cmluZ10nXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRzbGludCAob3B0aW9ucyA9IHt9KSB7XG4gIGxldCBsaW50ZXJcblxuICBjb25zdCBmaWx0ZXIgPSBjcmVhdGVGaWx0ZXIoXG4gICAgb3B0aW9ucy5pbmNsdWRlLFxuICAgIG9wdGlvbnMuZXhjbHVkZSB8fCAnbm9kZV9tb2R1bGVzLyoqJ1xuICApXG5cbiAgLy8gZm9ybWF0dGVyOiBcInN0eWxpc2hcIlxuICAvLyBydWxlc0RpcmVjdG9yeTogbnVsbCxcbiAgLy8gZm9ybWF0dGVyc0RpcmVjdG9yeTogXCJjdXN0b21Gb3JtYXR0ZXJzL1wiXG5cbiAgY29uc3QgdHNDb25maWdTZWFyY2hQYXRoID0gb3B0aW9ucy50c0NvbmZpZ1NlYXJjaFBhdGggfHwgcHJvY2Vzcy5jd2QoKVxuICBjb25zdCB0c0NvbmZpZ0ZpbGUgPSB0cy5maW5kQ29uZmlnRmlsZSh0c0NvbmZpZ1NlYXJjaFBhdGgsIHRzLnN5cy5maWxlRXhpc3RzKVxuXG4gIGNvbnN0IGNvbmZpZyA9IHtcbiAgICBmaXg6IG9wdGlvbnMuZml4IHx8IGZhbHNlLFxuICAgIGZvcm1hdHRlcjogb3B0aW9ucy5mb3JtYXR0ZXIgfHwgJ3N0eWxpc2gnLFxuICAgIGZvcm1hdHRlcnNEaXJlY3Rvcnk6IG9wdGlvbnMuZm9ybWF0dGVyc0RpcmVjdG9yeSB8fCBudWxsLFxuICAgIHJ1bGVzRGlyZWN0b3J5OiBvcHRpb25zLnJ1bGVzRGlyZWN0b3J5IHx8IG51bGxcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbmFtZTogJ3RzbGludCcsXG4gICAgc291cmNlTWFwOiBmYWxzZSxcblxuICAgIG9wdGlvbnMgKCkge1xuICAgICAgY29uc3QgcHJvZ3JhbSA9IExpbnRlci5jcmVhdGVQcm9ncmFtKHRzQ29uZmlnRmlsZSlcblxuICAgICAgbGludGVyID0gbmV3IExpbnRlcihjb25maWcsIHByb2dyYW0pXG4gICAgfSxcblxuICAgIHRyYW5zZm9ybSAoY29kZSwgaWQpIHtcbiAgICAgIGNvbnN0IGZpbGVOYW1lID0gbm9ybWFsaXplUGF0aChpZClcbiAgICAgIGlmICghZmlsdGVyKGlkKSkge1xuICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgfVxuXG4gICAgICBjb25zdCBjb25maWd1cmF0aW9uID1cbiAgICAgICAgb3B0aW9ucy5jb25maWd1cmF0aW9uID09PSBudWxsIHx8XG4gICAgICAgIG9wdGlvbnMuY29uZmlndXJhdGlvbiA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgIGlzU3RyaW5nKG9wdGlvbnMuY29uZmlndXJhdGlvbilcbiAgICAgICAgICA/IENvbmZpZ3VyYXRpb24uZmluZENvbmZpZ3VyYXRpb24oXG4gICAgICAgICAgICAgIG9wdGlvbnMuY29uZmlndXJhdGlvbiB8fCBudWxsLFxuICAgICAgICAgICAgICBmaWxlTmFtZVxuICAgICAgICAgICAgKS5yZXN1bHRzXG4gICAgICAgICAgOiBDb25maWd1cmF0aW9uLnBhcnNlQ29uZmlnRmlsZShvcHRpb25zLmNvbmZpZ3VyYXRpb24sIHByb2Nlc3MuY3dkKCkpXG5cbiAgICAgIGxpbnRlci5saW50KGlkLCBjb2RlLCBjb25maWd1cmF0aW9uKVxuICAgICAgY29uc3QgcmVzdWx0ID0gbGludGVyLmdldFJlc3VsdCgpXG5cbiAgICAgIC8vIENsZWFyIGFsbCByZXN1bHRzIGZvciBjdXJyZW50IGZpbGUgZnJvbSB0c2xpbnRcbiAgICAgIGxpbnRlci5mYWlsdXJlcyA9IFtdXG4gICAgICBsaW50ZXIuZml4ZXMgPSBbXVxuXG4gICAgICBjb25zdCBoYXNXYXJuaW5ncyA9IG9wdGlvbnMudGhyb3dPbldhcm5pbmcgJiYgcmVzdWx0Lndhcm5pbmdDb3VudCAhPT0gMFxuICAgICAgY29uc3QgaGFzRXJyb3JzID0gKG9wdGlvbnMudGhyb3dPbkVycm9yIHx8IG9wdGlvbnMudGhyb3dFcnJvcikgJiYgcmVzdWx0LmVycm9yQ291bnQgIT09IDBcblxuICAgICAgaWYgKHJlc3VsdC5lcnJvckNvdW50IHx8IHJlc3VsdC53YXJuaW5nQ291bnQpIHtcbiAgICAgICAgY29uc29sZS5sb2cocmVzdWx0Lm91dHB1dClcbiAgICAgIH1cblxuICAgICAgaWYgKGhhc1dhcm5pbmdzICYmIGhhc0Vycm9ycykge1xuICAgICAgICB0aHJvdyBFcnJvcignV2FybmluZ3Mgb3IgZXJyb3JzIHdlcmUgZm91bmQnKVxuICAgICAgfVxuXG4gICAgICBpZiAoaGFzV2FybmluZ3MpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ1dhcm5pbmdzIHdlcmUgZm91bmQnKVxuICAgICAgfVxuXG4gICAgICBpZiAoaGFzRXJyb3JzKSB7XG4gICAgICAgIHRocm93IEVycm9yKCdFcnJvcnMgd2VyZSBmb3VuZCcpXG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOlsidHNsaW50IiwibGV0IiwiY29uc3QiLCJjcmVhdGVGaWx0ZXIiLCJMaW50ZXIiLCJDb25maWd1cmF0aW9uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFLQSxTQUFTLGFB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
